"use strict";

import { extractOverflowButtonData, overflowMenuPressHandlerDropdownMenu, defaultOnOverflowMenuPress } from "./overflowMenuPressHandlers.js";
import { OVERFLOW_TOP, useOverflowMenu } from "./OverflowMenuContext.js";
import { View, StyleSheet } from 'react-native';
import { HeaderButton } from "../HeaderButton.js";
import { ButtonsWrapper } from "../ButtonsWrapper.js";
import { Children, isValidElement, useCallback, useRef } from 'react';
import * as React from 'react';
import { OVERFLOW_BUTTON_TEST_ID } from "../e2e.js";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
export const OverflowMenu = ({
  children,
  OverflowIcon = /*#__PURE__*/_jsx(View, {}),
  accessibilityLabel = 'More options',
  testID = OVERFLOW_BUTTON_TEST_ID,
  onPress = defaultOnOverflowMenuPress,
  left = false,
  // this is needed only when OverflowMenu is rendered without HeaderButtons,
  preset,
  ...other
}) => {
  const presentationCalls = useOverflowMenu();
  const btnRef = useRef(null);
  const renderButtonElement = useCallback(({
    color
  }) => {
    return /*#__PURE__*/isValidElement(OverflowIcon) ? OverflowIcon : /*#__PURE__*/_jsx(OverflowIcon, {
      color: color
    });
  }, [OverflowIcon]);
  const presentOverflowMenu = useCallback(() => {
    const titlesAndOnPresses = onPress === overflowMenuPressHandlerDropdownMenu ? [] : extractOverflowButtonData(children);
    onPress({
      children,
      hiddenButtons: titlesAndOnPresses,
      overflowButtonRef: btnRef.current,
      ...presentationCalls
    });
  }, [children, onPress, presentationCalls]);
  const validChildren = Children.toArray(children).filter(isValidElement);
  if (validChildren.length === 0) {
    return null;
  }
  return /*#__PURE__*/_jsxs(ButtonsWrapper, {
    left: left,
    style: styles.wrapper,
    preset: preset,
    children: [/*#__PURE__*/_jsx(View, {
      ref: btnRef,
      collapsable: false,
      style: styles.overflowMenuAnchor
    }), /*#__PURE__*/_jsx(HeaderButton, {
      title: "overflow menu",
      renderButton: renderButtonElement,
      onPress: presentOverflowMenu,
      accessibilityLabel: accessibilityLabel,
      testID: testID,
      ...other
    })]
  });
};
const styles = StyleSheet.create({
  wrapper: {
    columnGap: 0
  },
  overflowMenuAnchor: {
    // these are really just needed bcs of the native android popup menu
    position: 'absolute',
    top: -OVERFLOW_TOP,
    // TODO android actually has a little gap on the right of the menu
    right: -15,
    backgroundColor: 'transparent',
    width: 1,
    height: 1
  }
});
//# sourceMappingURL=OverflowMenu.js.map