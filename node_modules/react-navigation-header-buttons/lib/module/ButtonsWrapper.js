"use strict";

import * as React from 'react';
import { Platform, StyleSheet, View } from 'react-native';
/*
 * the `left` prop can be provided to HeaderButtons as well as OverflowMenu
 * this will render some extra margins on the corresponding side
 * but must be considered only once which is the job of this Context
 * */
import { jsx as _jsx } from "react/jsx-runtime";
export const ButtonsExtraMarginContext = /*#__PURE__*/React.createContext('toBeHandled');
export const ButtonsWrapper = ({
  left,
  children,
  style,
  preset = 'stackHeader'
}) => {
  const marginStatus = React.useContext(ButtonsExtraMarginContext);
  const extraSideMargin = preset === 'tabHeader' || marginStatus === 'toBeHandled' ? getHeaderMargin(left) : undefined;
  return /*#__PURE__*/_jsx(ButtonsExtraMarginContext.Provider, {
    value: "alreadyHandled",
    children: /*#__PURE__*/_jsx(View, {
      style: [styles.row, extraSideMargin, style],
      children: children
    })
  });
};
export const getHeaderMargin = (left = false) => {
  return left ? styles.extraEdgeMarginOnLeft : styles.extraEdgeMarginOnRight;
};
const styles = StyleSheet.create({
  row: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    ...Platform.select({
      android: {
        columnGap: 18
      },
      default: {
        columnGap: 24
      }
    })
  },
  extraEdgeMarginOnLeft: {
    // not used in native stack
    // only applies in JS stack or when rendered as a header for a tab navigator
    ...Platform.select({
      android: {
        marginLeft: 15
      },
      default: {
        marginLeft: 14
      }
    })
  },
  extraEdgeMarginOnRight: {
    // not used in native stack
    // only applies in JS stack or when rendered as a header for a tab navigator
    ...Platform.select({
      android: {
        marginRight: 14
      },
      default: {
        marginRight: 15
      }
    })
  }
});
//# sourceMappingURL=ButtonsWrapper.js.map