"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HeaderButtonsProviderDropdownMenu = void 0;
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _ButtonsWrapper = require("../ButtonsWrapper.js");
var _OverflowMenuContext = require("./OverflowMenuContext.js");
var _Menu = require("./vendor/Menu.js");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const HeaderButtonsProviderDropdownMenu = ({
  children,
  spaceAboveMenu,
  stackType
}) => {
  const [menuState, setMenuState] = (0, _react.useState)({
    visible: false,
    position: {
      x: _reactNative.Dimensions.get('window').width - 10,
      y: 40
    },
    elements: null
  });
  const {
    colors: {
      card
    }
  } = (0, _native.useTheme)();
  const {
    top
  } = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)();
  const defaultSpaceAboveOverflowMenu = _reactNative.Platform.select({
    ios: 0,
    default: top
  });
  const appliedSpaceAboveMenu = spaceAboveMenu ?? defaultSpaceAboveOverflowMenu + 5;
  const closeMenu = (0, _react.useCallback)(() => {
    setMenuState(prevState => ({
      ...prevState,
      visible: false
    }));
  }, []);
  const presentMenu = (0, _react.useCallback)(params => {
    setMenuState(prevState => {
      const position = params ? {
        x: params.x,
        y: params.y + appliedSpaceAboveMenu
      } : prevState.position;
      const elements = params ? params.elements : prevState.elements;
      return {
        ...prevState,
        position,
        elements,
        visible: true
      };
    });
  }, [appliedSpaceAboveMenu]);
  const value = (0, _react.useMemo)(() => ({
    presentMenu,
    closeMenu
  }), [presentMenu, closeMenu]);
  const extraMarginValue = stackType === 'native' ? 'alreadyHandled' : 'toBeHandled';
  const {
    visible,
    position,
    elements
  } = menuState;
  const contentStyle = (0, _react.useMemo)(() => ({
    backgroundColor: card
  }), [card]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_OverflowMenuContext.OverflowMenuContext.Provider, {
    value: value,
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_ButtonsWrapper.ButtonsExtraMarginContext.Provider, {
      value: extraMarginValue,
      children: [React.Children.only(children), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Menu.Menu, {
        visible: visible,
        onDismiss: closeMenu,
        anchor: position,
        contentStyle: contentStyle,
        children: elements
      })]
    })
  });
};
exports.HeaderButtonsProviderDropdownMenu = HeaderButtonsProviderDropdownMenu;
//# sourceMappingURL=HeaderButtonsProviderDropdownMenu.js.map