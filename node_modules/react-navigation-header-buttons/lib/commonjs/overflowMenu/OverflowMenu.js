"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OverflowMenu = void 0;
var _overflowMenuPressHandlers = require("./overflowMenuPressHandlers.js");
var _OverflowMenuContext = require("./OverflowMenuContext.js");
var _reactNative = require("react-native");
var _HeaderButton = require("../HeaderButton.js");
var _ButtonsWrapper = require("../ButtonsWrapper.js");
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _e2e = require("../e2e.js");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const OverflowMenu = ({
  children,
  OverflowIcon = /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {}),
  accessibilityLabel = 'More options',
  testID = _e2e.OVERFLOW_BUTTON_TEST_ID,
  onPress = _overflowMenuPressHandlers.defaultOnOverflowMenuPress,
  left = false,
  // this is needed only when OverflowMenu is rendered without HeaderButtons,
  preset,
  ...other
}) => {
  const presentationCalls = (0, _OverflowMenuContext.useOverflowMenu)();
  const btnRef = (0, _react.useRef)(null);
  const renderButtonElement = (0, _react.useCallback)(({
    color
  }) => {
    return /*#__PURE__*/(0, _react.isValidElement)(OverflowIcon) ? OverflowIcon : /*#__PURE__*/(0, _jsxRuntime.jsx)(OverflowIcon, {
      color: color
    });
  }, [OverflowIcon]);
  const presentOverflowMenu = (0, _react.useCallback)(() => {
    const titlesAndOnPresses = onPress === _overflowMenuPressHandlers.overflowMenuPressHandlerDropdownMenu ? [] : (0, _overflowMenuPressHandlers.extractOverflowButtonData)(children);
    onPress({
      children,
      hiddenButtons: titlesAndOnPresses,
      overflowButtonRef: btnRef.current,
      ...presentationCalls
    });
  }, [children, onPress, presentationCalls]);
  const validChildren = _react.Children.toArray(children).filter(_react.isValidElement);
  if (validChildren.length === 0) {
    return null;
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_ButtonsWrapper.ButtonsWrapper, {
    left: left,
    style: styles.wrapper,
    preset: preset,
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      ref: btnRef,
      collapsable: false,
      style: styles.overflowMenuAnchor
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_HeaderButton.HeaderButton, {
      title: "overflow menu",
      renderButton: renderButtonElement,
      onPress: presentOverflowMenu,
      accessibilityLabel: accessibilityLabel,
      testID: testID,
      ...other
    })]
  });
};
exports.OverflowMenu = OverflowMenu;
const styles = _reactNative.StyleSheet.create({
  wrapper: {
    columnGap: 0
  },
  overflowMenuAnchor: {
    // these are really just needed bcs of the native android popup menu
    position: 'absolute',
    top: -_OverflowMenuContext.OVERFLOW_TOP,
    // TODO android actually has a little gap on the right of the menu
    right: -15,
    backgroundColor: 'transparent',
    width: 1,
    height: 1
  }
});
//# sourceMappingURL=OverflowMenu.js.map