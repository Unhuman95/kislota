"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HeaderButton = HeaderButton;
exports.defaultRenderVisibleButton = defaultRenderVisibleButton;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _elements = require("@react-navigation/elements");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// for renderVisibleButton() function

// for <Item />, some things are optional while they are required for HeaderButton

function HeaderButton(props) {
  const {
    colors
  } = (0, _native.useTheme)();
  const themeColor = _reactNative.Platform.select({
    ios: colors.primary,
    default: colors.text
  });
  const {
    renderButton,
    style,
    color,
    ...other
  } = props;
  const ButtonElement = renderButton({
    color: color || themeColor,
    ...other
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_elements.PlatformPressable, {
    hitSlop: buttonHitSlop
    // @ts-expect-error typings too strict
    ,
    style: _reactNative.StyleSheet.compose(styles.buttonContainer, style),
    android_ripple: rippleConfig,
    ...other,
    children: ButtonElement
  });
}
function defaultRenderVisibleButton(visibleButtonProps) {
  const {
    IconComponent,
    iconSize,
    color,
    iconName,
    title,
    buttonStyle
  } = visibleButtonProps;
  return IconComponent && iconName ? /*#__PURE__*/(0, _jsxRuntime.jsx)(IconComponent, {
    name: iconName,
    color: color,
    size: iconSize,
    style: buttonStyle
  }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
    style: [styles.text, {
      color
    }, buttonStyle],
    children: title
  });
}
const styles = _reactNative.StyleSheet.create({
  text: {
    ..._reactNative.Platform.select({
      android: {
        fontFamily: 'sans-serif-medium',
        fontSize: 14,
        textTransform: 'uppercase'
      },
      default: {
        fontSize: 17,
        textTransform: 'capitalize'
      }
    })
  },
  buttonContainer: {
    alignItems: 'center',
    justifyContent: 'center'
  }
});
const rippleConfig = {
  foreground: true,
  borderless: true,
  radius: 20
};
const buttonHitSlop = {
  top: 5,
  bottom: 5,
  left: 5,
  right: 5
};
//# sourceMappingURL=HeaderButton.js.map