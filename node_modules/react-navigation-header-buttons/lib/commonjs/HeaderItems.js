"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HiddenItem = HiddenItem;
exports.Item = Item;
var React = _interopRequireWildcard(require("react"));
var _HeaderButtonComponentContext = require("./HeaderButtonComponentContext.js");
var _OverflowMenuContext = require("./overflowMenu/OverflowMenuContext.js");
var _HeaderButton = require("./HeaderButton.js");
var _MenuItem = require("./overflowMenu/vendor/MenuItem.js");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function HiddenItem({
  onPress,
  ...otherProps
}) {
  const {
    closeMenu
  } = (0, _OverflowMenuContext.useOverflowMenu)();

  // when rendering dropdown menu (e.g. android default), the return value is actually rendered
  // when we show action sheet, we do not render the returned value,
  // but just extract title, onPress and destructive passed to HiddenItem. HiddenItem() is not called
  const onMenuItemPress = nativeEvent => {
    closeMenu();
    onPress && onPress(nativeEvent);
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_MenuItem.MenuItem, {
    ...otherProps,
    onPress: onMenuItemPress
  });
}

// TODO check RTL
function Item(props) {
  const HeaderButtonComponent = React.useContext(_HeaderButtonComponentContext.HeaderButtonComponentContext);
  // HeaderButtonComponent (HeaderButton by default) already is provided iconSize, icon color and etc.
  // Item itself will likely only have title, onPress and iconName
  // but also can override iconSize, icon color, etc. if needed
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(HeaderButtonComponent, {
    renderButton: _HeaderButton.defaultRenderVisibleButton,
    ...props
  });
}
//# sourceMappingURL=HeaderItems.js.map