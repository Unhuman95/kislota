"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHeaderMargin = exports.ButtonsWrapper = exports.ButtonsExtraMarginContext = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * the `left` prop can be provided to HeaderButtons as well as OverflowMenu
 * this will render some extra margins on the corresponding side
 * but must be considered only once which is the job of this Context
 * */

const ButtonsExtraMarginContext = exports.ButtonsExtraMarginContext = /*#__PURE__*/React.createContext('toBeHandled');
const ButtonsWrapper = ({
  left,
  children,
  style,
  preset = 'stackHeader'
}) => {
  const marginStatus = React.useContext(ButtonsExtraMarginContext);
  const extraSideMargin = preset === 'tabHeader' || marginStatus === 'toBeHandled' ? getHeaderMargin(left) : undefined;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(ButtonsExtraMarginContext.Provider, {
    value: "alreadyHandled",
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.row, extraSideMargin, style],
      children: children
    })
  });
};
exports.ButtonsWrapper = ButtonsWrapper;
const getHeaderMargin = (left = false) => {
  return left ? styles.extraEdgeMarginOnLeft : styles.extraEdgeMarginOnRight;
};
exports.getHeaderMargin = getHeaderMargin;
const styles = _reactNative.StyleSheet.create({
  row: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    ..._reactNative.Platform.select({
      android: {
        columnGap: 18
      },
      default: {
        columnGap: 24
      }
    })
  },
  extraEdgeMarginOnLeft: {
    // not used in native stack
    // only applies in JS stack or when rendered as a header for a tab navigator
    ..._reactNative.Platform.select({
      android: {
        marginLeft: 15
      },
      default: {
        marginLeft: 14
      }
    })
  },
  extraEdgeMarginOnRight: {
    // not used in native stack
    // only applies in JS stack or when rendered as a header for a tab navigator
    ..._reactNative.Platform.select({
      android: {
        marginRight: 14
      },
      default: {
        marginRight: 15
      }
    })
  }
});
//# sourceMappingURL=ButtonsWrapper.js.map